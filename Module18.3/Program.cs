using System;
using System.Net.Http;
using System.Threading.Tasks;

namespace Module18._3
{
    #region Program
    //internal class Program
    //{
    //    static void Main(string[] args)
    //    {
    //        Console.WriteLine("Hello, World!");
    //    }
    //}
    #endregion
    // Антипаттерны
    #region АРХИТЕКТУРНЫЕ
    // Это ошибки, возникающие при проектировании систем.
    // Их могут допускать как системные архитекторы, так
    // и разработчики уровня Middle и Middle +.
    #endregion
    #region РАЗРАБОТЧЕСКИЕ
    // Паттерны, которые могут возникнуть у программистов
    // всех уровней непосредственно при написании кода.
    #endregion
    //Отдельно по видам антипаттернов:
    #region ПРЕЖДЕВРЕМЕННАЯ ОПТИМИЗАЦИЯ
    // При написании кода вам стоит как можно быстрее
    // перейти непосредственно к профилированию, и
    // получить реальную информацию об узких местах,
    // вместо того чтобы пытаться предугадать это.
    #endregion
    #region ЗОЛОТОЙ МОЛОТОК
    // «If one has a hammer, every problem looks like a nail» —
    // так формулируется этот антипаттерн на английском языке.
    // Дословно: если у вас есть молоток, каждая проблема выглядит
    // как гвоздь. Как правило, это выражается в постоянном использовании
    // одного и того же типового решения для схожих (и не очень) задач.
    #endregion
    #region ИЗОБРЕТЕНИЕ ВЕЛОСИПЕДА
    // Очень часто бывает, что программист долго работает над каким-либо
    // решением, а потом, уже потратив достаточно много времени, узнает,
    // что есть готовое. И это в лучшем случае. Часто бывает, что задача
    // уже выполнена, и мы узнаем, что есть более эффективные готовые решения.
    #endregion
    #region КОПИПАСТ
    // Программисты не только бездумно используют готовые библиотеки,
    // не особо вникая в механизм работы, но часто и напрямую используют
    // куски кода, вставляя их без изменения в свой проект.
    #endregion
    #region БОЖЕСТВЕННЫЙ ОБЪЕКТ (MASTER OBJECT)
    // Основой системы служит один монструозный класс,
    // который отвечает за всё и вся.Естественно, он
    // обрастает связями и зависимостям, с ним очень сложно
    // работать и почти невозможно рефакторить.
    #endregion
    #region ИЗБЫТОЧНАЯ СЛОЖНОСТЬ
    // Простые системы всегда стабильнее сложных.
    // Здесь речь идет о нарушении принципа KISS (Keep It Simple, Stupid).
    // Такая проблема может возникать и при избыточном и неуместном
    // применении паттернов. Также это могут быть ненужные проверки
    // в коде на всякие малозначительные условия, избыточная обработка
    // исключений, попытки предусмотреть всё и вся.
    #endregion
    #region СПАГЕТТИ-КОД
    // Большое количество ветвлений, условий, вложенных циклов,
    // неуместная обработка исключений — всё это делает ваш код
    // похожим на спагетти.
    // (В общем случае заслуживает внимания такой неформальный подход:
    // ваш метод должен помещаться на один экран. Если он занимает
    // больше, скорее всего, стоит подумать над тем, чтобы как-то
    // раздробить его, сделать более модульным, часть функционала вынести
    // и так далее.)
    #endregion
    #region 18.3.7
    #region Исходник
    //class Program
    //{
    //    static void Main(string[] args)
    //    {
    //        // Печатаем баннер нужного размера на материале
    //        var printer = new Printer();
    //        printer.Start(15, "Canvas");
    //    }
    //}

    //public class Printer
    //{
    //    /// <summary>
    //    ///  Запуск принтера
    //    /// </summary>
    //    public void Start(int size, string material)
    //    {
    //        //  печать информации о материале
    //        PrintInfo(material);

    //        // печать на разных носителях в зависимости от размера
    //        if (size < 10)
    //        {
    //            Console.WriteLine("Size M");
    //            Console.WriteLine("printing on small canvas");
    //        }
    //        else if (size < 90)
    //        {
    //            Console.WriteLine("Size L");
    //            Console.WriteLine("printing on medium canvas");
    //        }
    //        else
    //        {
    //            Console.WriteLine("Size XL");
    //            Console.WriteLine("printing on large canvas");
    //        }
    //    }

    //    static void PrintInfo(string material)
    //    {
    //        Console.WriteLine($"Awesome Print on {material}!");
    //    }
    //}
    #endregion
    #region рефакторинг
    //class Program
    //{
    //    static void Main(string[] args)
    //    {
    //        // Печатаем баннер нужного размера на материале
    //        var printer = new Printer();
    //        printer.Start(15, "Canvas");
    //    }
    //}

    //public class Printer
    //{
    //    /// <summary>
    //    ///  Запуск принтера
    //    /// </summary>
    //    public void Start(int size, string material)
    //    {
    //        //  печать информации о материале
    //        PrintInfo(material);

    //        // печать на разных носителях в зависимости от размера
    //        PrintSize(size);
    //    }

    //    static void PrintInfo(string material)
    //    {
    //        Console.WriteLine($"Awesome Print on {material}!");
    //    }

    //    static void PrintSize(int size)
    //    {
    //        string sizeCode;
    //        string sizeName;

    //        if (size < 10)
    //        {
    //            sizeCode = "M";
    //            sizeName = "small";
    //        }

    //        else if (size < 90)
    //        {
    //            sizeCode = "L";
    //            sizeName = "medium";
    //        }

    //        else
    //        {
    //            sizeCode = "XL";
    //            sizeName = "large";
    //        }

    //        Console.WriteLine($"Size {sizeCode}");
    //        Console.WriteLine($"printing on {sizeName} canvas");
    //    }
    #endregion
    #endregion
    #region ЛОДОЧНЫЙ ЯКОРЬ (BOAT ANCHOR)
    // Общее правило: ненужный код нужно сразу же удалять из проекта.
    // Причем делать это только после детального ревью всей системы
    // при участии всей команды проекта. В крайнем случае (при текущей
    // интенсивной разработке) код можно закомментировать, но он никогда
    // не должен попадать в актуальный релиз.
    #endregion
    #region ПОТОК ЛАВЫ
    // «Волшебный» легаси код, который все используют, но никто не знает, как он работает.
    // Иногда такие куски даже соответствующим образом закомментированы:
    // ( // Не знаю как работает, ... )
    // ( // Просьба не трогать )
    // Способы избежать довольно простые: пытаться по возможности не делегировать одному
    // программисту полностью разработку какой-либо задачи, а держать команду в курсе того,
    // что делается. Документировать решения и оставлять комментарии в коде тоже будет не лишним. 
    #endregion
    #region ХАРД-КОД (ЖЕСТКОЕ КОДИРОВАНИЕ)
    // Добавление данных о среде и окружении в исходный код.
    // Это всем известная проблема. При этом код теряет переносимость,
    // его исполнение в разной среде становится проблематичным. В вашей
    // системе всё будет работать, пока не появятся изменения в её конфигурации. 
    // Чтобы этого избежать, вам стоит создавать специальные объекты для
    // конфигурации, заполнять их данными из какого-либо одного места (например,
    // конфигурационного файла), а затем перебрасывать в другие части кода. Где
    // надо использовать внедрение зависимостей.
    // Но этим тоже не стоит увлекаться, иначе получим уже следующий пункт.
    #endregion
    #region СОФТ-КОД (МЯГКОЕ КОДИРОВАНИЕ)
    // Нездоровое увлечение конфигурацией, стремление динамически настраивать в проекте всё и вся.
    // Перед разработкой стоит определиться, какие элементы конфигурации будут настраиваемыми,
    // какие — постоянными и не зависящими от окружения, а какие — могут быть сконфигурированы автоматически.
    #endregion
    #region 18.3.8
    #region исходник
    //class Program
    //{
    //    static async Task Main(string[] args)
    //    {
    //        // запрос выгрузки информации с сайта
    //        await LoadSite();
    //    }

    //    static async Task LoadSite()
    //    {
    //        // создаем клиента для http-запросов
    //        var httpClient = new HttpClient();

    //        // задаем адрес сайта
    //        httpClient.BaseAddress = new Uri("http://192.250.225.62/");

    //        // запрашиваем нужный ресурс
    //        var result = await httpClient.GetAsync("?965502");

    //        // считываем ответ в строку и выводим
    //        var contentString = await result.Content.ReadAsStringAsync();
    //        Console.WriteLine(contentString);
    //    }
    //}
    #endregion
    #region рефакторинг
    class Program
    {
        static async Task Main(string[] args)
        {
            string siteUrl = "http://192.250.225.62/";
            string resourceID = "?965502";

            // запрос выгрузки информации с сайта
            await LoadSite(siteUrl, resourceID);
        }

        static async Task LoadSite(string siteUrl, string resourceId)
        {
            // создаем клиента для http-запросов
            var httpClient = new HttpClient();

            // задаем адрес сайта
            httpClient.BaseAddress = new Uri(siteUrl);

            // запрашиваем нужный ресурс
            var result = await httpClient.GetAsync(resourceId);

            // считываем ответ в строку и выводим
            var contentString = await result.Content.ReadAsStringAsync();
            Console.WriteLine(contentString);
        }
    }
    #endregion
    #endregion
}